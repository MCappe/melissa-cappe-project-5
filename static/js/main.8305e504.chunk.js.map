{"version":3,"sources":["Podcasts.js","api-transparent background for white background.png","App.js","reportWebVitals.js","index.js"],"names":["Podcasts","className","src","this","props","podImage","alt","podTitle","podDescription","Component","App","handleChange","e","podOption","target","options","selectedIndex","value","getPodcasts","state","podcasts","idValue","axios","url","method","params","headers","then","response","console","log","data","setState","htmlFor","name","id","onChange","map","pod","image","title","description","href","image2","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAwBeA,E,uKApBP,OACI,8BACI,yBAASC,UAAU,aAAnB,SACI,6BACI,qBAAIA,UAAU,YAAd,UACI,qBAAKA,UAAU,iBAAf,SACI,qBAAKC,IAAKC,KAAKC,MAAMC,SAAUC,IAAKH,KAAKC,MAAMG,aAEnD,sBAAKN,UAAU,UAAf,UACI,6BAAKE,KAAKC,MAAMG,WAChB,4BAAIJ,KAAKC,MAAMI,iC,GAZxBC,aCFR,MAA0B,4ECiG1BC,E,kDAvFb,aAAe,IAAD,8BACZ,gBA4BFC,aAAe,SAACC,GAEd,IAAMC,EAAYD,EAAEE,OAAOC,QAAQH,EAAEE,OAAOE,eAAeC,MAC3D,EAAKC,YAAYL,IA7BjB,EAAKM,MAAQ,CACXC,SAAU,IAJA,E,wDAQDC,GAAU,IAAD,OAEpBC,IAAM,CACJC,IAAK,2DACLC,OAAQ,MACRC,OAAQ,CACN,SAAYJ,GAEdK,QAAS,CACP,kBAAmB,sCAEpBC,MAAK,SAACC,GACPC,QAAQC,IAAIF,EAASG,MAErB,EAAKC,SAAS,CACZZ,SAAUQ,EAASG,KAAKX,gB,4EAkB5B,OACE,sBAAKnB,UAAU,UAAf,UACE,sBAAKA,UAAU,eAAf,UACE,mCACE,qBAAIA,UAAU,wCAAd,UAAsD,+BAAM,mBAAGA,UAAU,wBAAzE,oBAAyH,+BAAM,mBAAGA,UAAU,2BAC5I,mBAAGA,UAAU,wCAAb,+DACA,mBAAGA,UAAU,wCAAb,mEACA,qBAAKA,UAAU,SAAf,SACE,sBAAMA,UAAU,mDAAhB,SACE,uBAAOgC,QAAQ,GAAf,SACE,yBAAQC,KAAK,WAAWC,GAAG,OAAOlC,UAAU,SAASmC,SAAUjC,KAAKQ,aAApE,UACE,oDACA,wBAAQM,MAAM,MAAd,wBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,KAAd,yBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,KAAd,8BAQRd,KAAKgB,MAAMC,SAASiB,KAAI,SAACC,GACvB,OACE,cAAC,EAAD,CAEAjC,SAAUiC,EAAIC,MACdhC,SAAU+B,EAAIE,MACdhC,eAAgB8B,EAAIG,aAHfH,EAAIH,UASnB,mCACI,wDAAuB,mBAAGO,KAAK,2BAAR,6BACvB,qBAAKzC,UAAU,aAAaC,IAAKyC,EAAQrC,IAAI,8B,GAhFrCG,aCGHmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8305e504.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass Podcasts extends Component {\n    render() {\n        return (\n            <div>\n                <section className=\"podSection\">\n                    <ul>\n                        <li className=\"container\">\n                            <div className=\"imageContainer\">\n                                <img src={this.props.podImage} alt={this.props.podTitle}/>\n                            </div>\n                            <div className=\"podInfo\">\n                                <h2>{this.props.podTitle}</h2>\n                                <p>{this.props.podDescription}</p>\n                            </div>\n                        </li>\n                    </ul>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Podcasts;","export default __webpack_public_path__ + \"static/media/api-transparent background for white background.443fcec0.png\";","import './App.css';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport Podcasts from './Podcasts.js'\n// import animate.css from './animate.css';\nimport image2 from './api-transparent background for white background.png';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    // Initialize state to keep track of the data coming back from the ListenNotes API\n    this.state = {\n      podcasts: []\n    }\n  }\n  \n  getPodcasts (idValue) {\n    // API call via axios\n    axios({\n      url: 'https://listen-api.listennotes.com/api/v2/best_podcasts/',\n      method: 'GET',\n      params: {\n        'genre_id': idValue\n      },\n      headers: {\n        'X-ListenAPI-Key': '47935c3ff89243c39e091cc561774aa5',\n      }\n    }).then((response) => {\n      console.log(response.data)\n      // setState to render the podcast information to the page\n      this.setState({\n        podcasts: response.data.podcasts\n      })\n    })\n\n  }\n\n  handleChange = (e) => {\n    // onChange event handler to listen for user to select a genre in the select drop down menu\n    const podOption = e.target.options[e.target.selectedIndex].value;\n    this.getPodcasts(podOption);\n    // console.log(podOption);\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n      <div className=\"podPage\">\n        <div className=\"wrapper main\">\n          <header>\n            <h1 className=\"animate__animated animate__backInLeft\"><span><i className=\"fas fa-microphone\"></i></span> Hello Pod World <span><i className=\"fas fa-microphone\"></i></span></h1>\n            <p className=\"animate__animated animate__backInLeft\">What podcast do you feel like listening to today?</p>\n            <p className=\"animate__animated animate__backInLeft\">Select your genre and we'll tell you what's trending.</p>\n            <div className=\"select\">\n              <form className=\"selections animate__animated animate__backInLeft\">\n                <label htmlFor=\"\">\n                  <select name=\"podcasts\" id=\"pods\" className=\"select\" onChange={this.handleChange}>\n                    <option>Select a genre</option>\n                    <option value=\"135\">True Crime</option>\n                    <option value=\"77\">Sports</option>\n                    <option value=\"68\">TV and Film</option>\n                    <option value=\"133\">Comedy</option>\n                    <option value=\"99\">News</option>\n                  </select>\n                </label>\n              </form>\n            </div>\n          </header>          \n\n          {\n            this.state.podcasts.map((pod) => {\n              return (\n                <Podcasts \n                key={pod.id}\n                podImage={pod.image}\n                podTitle={pod.title}\n                podDescription={pod.description}/>\n              )\n            })\n          }\n\n        </div>\n      <footer>\n          <p>Â© Melissa Cappe for <a href=\"https://junocollege.com/\">Juno College</a></p>\n          <img className=\"listenLogo\" src={image2} alt=\"Listen API logo\"/>\n      </footer>\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}